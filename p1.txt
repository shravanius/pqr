
sudo apt-get update -y
    sudo apt-get install apache2 wget unzip vim -y
    sudo systemctl enable apache2
    mkdir -p /tmp/finance
    cd /tmp/finance
    wget https://www.tooplate.com/zip-templates/2103_central.zip
    unzip -o 2103_central.zip
    sudo cp -r 2103_central/* /var/www/html/
    sudo systemctl restart apache2
    cd /tmp/
    rm -rf /tmp/finance



Q. Advanced Docker (Docker Compose, Networking, Volumes) 
1) Mongo-Express Application (Manual using Docker commands)
 A. Run a container using the Mongo image, ensuring to set suitable environment variables, map ports, assign container names, and connect to a custom network. Command:

docker network create mongo-net

docker run -d \
  --name mongo-container \
  --network mongo-net \
  -e MONGO_INITDB_ROOT_USERNAME=admin \
  -e MONGO_INITDB_ROOT_PASSWORD=admin123 \
  -p 27017:27017 \
  Mongo

B. Run a container using the mongo-express image, ensuring to set appropriate environment variables, map ports, assign container names, and connect it to the same custom network as the Mongo container? Additionally, how would you ensure that both containers, Mongo and mongo-express, are interconnected and accessible via the browser, particularly accessing the mongo-express application. Command:


docker run -d \
  --name mongo-express-container \
  --network mongo-net \
  -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \
  -e ME_CONFIG_MONGODB_ADMINPASSWORD=admin123 \
  -e ME_CONFIG_MONGODB_SERVER=mongo-container \
  -p 8081:8081 \
  mongo-express

http://localhost:8081

2) Mongo-Express Application (Using docker-compose.yml)
 A. Run a container using the Mongo image, ensuring to set suitable environment variables, map ports, assign container names, and connect to a default network. 
B. Run a container using the mongo-express image, ensuring to set appropriate environment variables, map ports, assign container names, and connect it to the same default network as the Mongo container? Additionally, how would you ensure that both containers, Mongo and mongo-express, are interconnected and accessible via the browser, particularly accessing the mongo-express application. Docker-compose.yml

docker-compose.yml

version: '3.8’
services:
  mongo:
    image: mongo
    container_name: mongo-container
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "27017:27017"

  mongo-express:
    image: mongo-express
    container_name: mongo-express-container
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "8081:8081"
    depends_on:
      - mongo

Access in Browser:
After running:
docker-compose up –d
go to:
http://localhost:8081
